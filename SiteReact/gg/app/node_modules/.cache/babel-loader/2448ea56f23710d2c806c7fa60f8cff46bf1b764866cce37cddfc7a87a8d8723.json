{"ast":null,"code":"import _classCallCheck from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DIRECTION } from './utils.js';\nimport './change-details.js';\nimport './holder.js';\n\n/** Provides details of changing input */\nvar ActionDetails = /*#__PURE__*/function () {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n\n  function ActionDetails(value, cursorPos, oldValue, oldSelection) {\n    _classCallCheck(this, ActionDetails);\n    this.value = value;\n    this.cursorPos = cursorPos;\n    this.oldValue = oldValue;\n    this.oldSelection = oldSelection;\n\n    // double check if left part was changed (autofilling, other non-standard input triggers)\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n\n  /**\n    Start changing position\n    @readonly\n  */\n  _createClass(ActionDetails, [{\n    key: \"startChangePos\",\n    get: function get() {\n      return Math.min(this.cursorPos, this.oldSelection.start);\n    }\n\n    /**\n      Inserted symbols count\n      @readonly\n    */\n  }, {\n    key: \"insertedCount\",\n    get: function get() {\n      return this.cursorPos - this.startChangePos;\n    }\n\n    /**\n      Inserted symbols\n      @readonly\n    */\n  }, {\n    key: \"inserted\",\n    get: function get() {\n      return this.value.substr(this.startChangePos, this.insertedCount);\n    }\n\n    /**\n      Removed symbols count\n      @readonly\n    */\n  }, {\n    key: \"removedCount\",\n    get: function get() {\n      // Math.max for opposite operation\n      return Math.max(this.oldSelection.end - this.startChangePos ||\n      // for Delete\n      this.oldValue.length - this.value.length, 0);\n    }\n\n    /**\n      Removed symbols\n      @readonly\n    */\n  }, {\n    key: \"removed\",\n    get: function get() {\n      return this.oldValue.substr(this.startChangePos, this.removedCount);\n    }\n\n    /**\n      Unchanged head symbols\n      @readonly\n    */\n  }, {\n    key: \"head\",\n    get: function get() {\n      return this.value.substring(0, this.startChangePos);\n    }\n\n    /**\n      Unchanged tail symbols\n      @readonly\n    */\n  }, {\n    key: \"tail\",\n    get: function get() {\n      return this.value.substring(this.startChangePos + this.insertedCount);\n    }\n\n    /**\n      Remove direction\n      @readonly\n    */\n  }, {\n    key: \"removeDirection\",\n    get: function get() {\n      if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n      // align right if delete at right\n      return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&\n      // if not range removed (event with backspace)\n      this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\n    }\n  }]);\n  return ActionDetails;\n}();\nexport { ActionDetails as default };","map":{"version":3,"names":["DIRECTION","ActionDetails","value","cursorPos","oldValue","oldSelection","slice","startChangePos","start","Math","min","substr","insertedCount","max","end","length","removedCount","substring","NONE","RIGHT","LEFT","default"],"sources":["C:/Users/admin/Desktop/Документы/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/imask/esm/core/action-details.js"],"sourcesContent":["import { DIRECTION } from './utils.js';\nimport './change-details.js';\nimport './holder.js';\n\n/** Provides details of changing input */\nclass ActionDetails {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n\n  constructor(value, cursorPos, oldValue, oldSelection) {\n    this.value = value;\n    this.cursorPos = cursorPos;\n    this.oldValue = oldValue;\n    this.oldSelection = oldSelection;\n\n    // double check if left part was changed (autofilling, other non-standard input triggers)\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n\n  /**\n    Start changing position\n    @readonly\n  */\n  get startChangePos() {\n    return Math.min(this.cursorPos, this.oldSelection.start);\n  }\n\n  /**\n    Inserted symbols count\n    @readonly\n  */\n  get insertedCount() {\n    return this.cursorPos - this.startChangePos;\n  }\n\n  /**\n    Inserted symbols\n    @readonly\n  */\n  get inserted() {\n    return this.value.substr(this.startChangePos, this.insertedCount);\n  }\n\n  /**\n    Removed symbols count\n    @readonly\n  */\n  get removedCount() {\n    // Math.max for opposite operation\n    return Math.max(this.oldSelection.end - this.startChangePos ||\n    // for Delete\n    this.oldValue.length - this.value.length, 0);\n  }\n\n  /**\n    Removed symbols\n    @readonly\n  */\n  get removed() {\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\n  }\n\n  /**\n    Unchanged head symbols\n    @readonly\n  */\n  get head() {\n    return this.value.substring(0, this.startChangePos);\n  }\n\n  /**\n    Unchanged tail symbols\n    @readonly\n  */\n  get tail() {\n    return this.value.substring(this.startChangePos + this.insertedCount);\n  }\n\n  /**\n    Remove direction\n    @readonly\n  */\n  get removeDirection() {\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n    // align right if delete at right\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&\n    // if not range removed (event with backspace)\n    this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\n  }\n}\n\nexport { ActionDetails as default };\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAO,qBAAqB;AAC5B,OAAO,aAAa;;AAEpB;AAAA,IACMC,aAAa;EACjB;;EAEA;;EAEA;;EAEA;;EAEA,uBAAYC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,YAAY,EAAE;IAAA;IACpD,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;;IAEhC;IACA,OAAO,IAAI,CAACH,KAAK,CAACI,KAAK,CAAC,CAAC,EAAE,IAAI,CAACC,cAAc,CAAC,KAAK,IAAI,CAACH,QAAQ,CAACE,KAAK,CAAC,CAAC,EAAE,IAAI,CAACC,cAAc,CAAC,EAAE;MAC/F,EAAE,IAAI,CAACF,YAAY,CAACG,KAAK;IAC3B;EACF;;EAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAqB;MACnB,OAAOC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACP,SAAS,EAAE,IAAI,CAACE,YAAY,CAACG,KAAK,CAAC;IAC1D;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAoB;MAClB,OAAO,IAAI,CAACL,SAAS,GAAG,IAAI,CAACI,cAAc;IAC7C;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAe;MACb,OAAO,IAAI,CAACL,KAAK,CAACS,MAAM,CAAC,IAAI,CAACJ,cAAc,EAAE,IAAI,CAACK,aAAa,CAAC;IACnE;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAmB;MACjB;MACA,OAAOH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACR,YAAY,CAACS,GAAG,GAAG,IAAI,CAACP,cAAc;MAC3D;MACA,IAAI,CAACH,QAAQ,CAACW,MAAM,GAAG,IAAI,CAACb,KAAK,CAACa,MAAM,EAAE,CAAC,CAAC;IAC9C;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAc;MACZ,OAAO,IAAI,CAACX,QAAQ,CAACO,MAAM,CAAC,IAAI,CAACJ,cAAc,EAAE,IAAI,CAACS,YAAY,CAAC;IACrE;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAW;MACT,OAAO,IAAI,CAACd,KAAK,CAACe,SAAS,CAAC,CAAC,EAAE,IAAI,CAACV,cAAc,CAAC;IACrD;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAW;MACT,OAAO,IAAI,CAACL,KAAK,CAACe,SAAS,CAAC,IAAI,CAACV,cAAc,GAAG,IAAI,CAACK,aAAa,CAAC;IACvE;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAsB;MACpB,IAAI,CAAC,IAAI,CAACI,YAAY,IAAI,IAAI,CAACJ,aAAa,EAAE,OAAOZ,SAAS,CAACkB,IAAI;;MAEnE;MACA,OAAO,CAAC,IAAI,CAACb,YAAY,CAACS,GAAG,KAAK,IAAI,CAACX,SAAS,IAAI,IAAI,CAACE,YAAY,CAACG,KAAK,KAAK,IAAI,CAACL,SAAS;MAC9F;MACA,IAAI,CAACE,YAAY,CAACS,GAAG,KAAK,IAAI,CAACT,YAAY,CAACG,KAAK,GAAGR,SAAS,CAACmB,KAAK,GAAGnB,SAAS,CAACoB,IAAI;IACtF;EAAC;EAAA;AAAA;AAGH,SAASnB,aAAa,IAAIoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}