{"ast":null,"code":"import _classCallCheck from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport HTMLMaskElement from './html-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './mask-element.js';\nvar HTMLContenteditableMaskElement = /*#__PURE__*/function (_HTMLMaskElement) {\n  _inherits(HTMLContenteditableMaskElement, _HTMLMaskElement);\n  var _super = _createSuper(HTMLContenteditableMaskElement);\n  function HTMLContenteditableMaskElement() {\n    _classCallCheck(this, HTMLContenteditableMaskElement);\n    return _super.apply(this, arguments);\n  }\n  _createClass(HTMLContenteditableMaskElement, [{\n    key: \"_unsafeSelectionStart\",\n    get:\n    /**\n      Returns HTMLElement selection start\n      @override\n    */\n    function get() {\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n      var anchorOffset = selection && selection.anchorOffset;\n      var focusOffset = selection && selection.focusOffset;\n      if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n        return anchorOffset;\n      }\n      return focusOffset;\n    }\n\n    /**\n      Returns HTMLElement selection end\n      @override\n    */\n  }, {\n    key: \"_unsafeSelectionEnd\",\n    get: function get() {\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n      var anchorOffset = selection && selection.anchorOffset;\n      var focusOffset = selection && selection.focusOffset;\n      if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n        return anchorOffset;\n      }\n      return focusOffset;\n    }\n\n    /**\n      Sets HTMLElement selection\n      @override\n    */\n  }, {\n    key: \"_unsafeSelect\",\n    value: function _unsafeSelect(start, end) {\n      if (!this.rootElement.createRange) return;\n      var range = this.rootElement.createRange();\n      range.setStart(this.input.firstChild || this.input, start);\n      range.setEnd(this.input.lastChild || this.input, end);\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n      if (selection) {\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n\n    /**\n      HTMLElement value\n      @override\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      // $FlowFixMe\n      return this.input.textContent;\n    },\n    set: function set(value) {\n      this.input.textContent = value;\n    }\n  }]);\n  return HTMLContenteditableMaskElement;\n}(HTMLMaskElement);\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\nexport { HTMLContenteditableMaskElement as default };","map":{"version":3,"names":["HTMLMaskElement","IMask","HTMLContenteditableMaskElement","root","rootElement","selection","getSelection","anchorOffset","focusOffset","start","end","createRange","range","setStart","input","firstChild","setEnd","lastChild","removeAllRanges","addRange","textContent","value","default"],"sources":["C:/Users/admin/Desktop/Документы/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/imask/esm/controls/html-contenteditable-mask-element.js"],"sourcesContent":["import HTMLMaskElement from './html-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './mask-element.js';\n\nclass HTMLContenteditableMaskElement extends HTMLMaskElement {\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n  get _unsafeSelectionStart() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n  get _unsafeSelectionEnd() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n  _unsafeSelect(start, end) {\n    if (!this.rootElement.createRange) return;\n    const range = this.rootElement.createRange();\n    range.setStart(this.input.firstChild || this.input, start);\n    range.setEnd(this.input.lastChild || this.input, end);\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  /**\n    HTMLElement value\n    @override\n  */\n  get value() {\n    // $FlowFixMe\n    return this.input.textContent;\n  }\n  set value(value) {\n    this.input.textContent = value;\n  }\n}\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n\nexport { HTMLContenteditableMaskElement as default };\n"],"mappings":";;;;AAAA,OAAOA,eAAe,MAAM,wBAAwB;AACpD,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAO,mBAAmB;AAAC,IAErBC,8BAA8B;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAClC;AACF;AACA;AACA;IACE,eAA4B;MAC1B,IAAMC,IAAI,GAAG,IAAI,CAACC,WAAW;MAC7B,IAAMC,SAAS,GAAGF,IAAI,CAACG,YAAY,IAAIH,IAAI,CAACG,YAAY,EAAE;MAC1D,IAAMC,YAAY,GAAGF,SAAS,IAAIA,SAAS,CAACE,YAAY;MACxD,IAAMC,WAAW,GAAGH,SAAS,IAAIA,SAAS,CAACG,WAAW;MACtD,IAAIA,WAAW,IAAI,IAAI,IAAID,YAAY,IAAI,IAAI,IAAIA,YAAY,GAAGC,WAAW,EAAE;QAC7E,OAAOD,YAAY;MACrB;MACA,OAAOC,WAAW;IACpB;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAA0B;MACxB,IAAML,IAAI,GAAG,IAAI,CAACC,WAAW;MAC7B,IAAMC,SAAS,GAAGF,IAAI,CAACG,YAAY,IAAIH,IAAI,CAACG,YAAY,EAAE;MAC1D,IAAMC,YAAY,GAAGF,SAAS,IAAIA,SAAS,CAACE,YAAY;MACxD,IAAMC,WAAW,GAAGH,SAAS,IAAIA,SAAS,CAACG,WAAW;MACtD,IAAIA,WAAW,IAAI,IAAI,IAAID,YAAY,IAAI,IAAI,IAAIA,YAAY,GAAGC,WAAW,EAAE;QAC7E,OAAOD,YAAY;MACrB;MACA,OAAOC,WAAW;IACpB;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,uBAAcC,KAAK,EAAEC,GAAG,EAAE;MACxB,IAAI,CAAC,IAAI,CAACN,WAAW,CAACO,WAAW,EAAE;MACnC,IAAMC,KAAK,GAAG,IAAI,CAACR,WAAW,CAACO,WAAW,EAAE;MAC5CC,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,IAAI,IAAI,CAACD,KAAK,EAAEL,KAAK,CAAC;MAC1DG,KAAK,CAACI,MAAM,CAAC,IAAI,CAACF,KAAK,CAACG,SAAS,IAAI,IAAI,CAACH,KAAK,EAAEJ,GAAG,CAAC;MACrD,IAAMP,IAAI,GAAG,IAAI,CAACC,WAAW;MAC7B,IAAMC,SAAS,GAAGF,IAAI,CAACG,YAAY,IAAIH,IAAI,CAACG,YAAY,EAAE;MAC1D,IAAID,SAAS,EAAE;QACbA,SAAS,CAACa,eAAe,EAAE;QAC3Bb,SAAS,CAACc,QAAQ,CAACP,KAAK,CAAC;MAC3B;IACF;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAY;MACV;MACA,OAAO,IAAI,CAACE,KAAK,CAACM,WAAW;IAC/B,CAAC;IAAA,KACD,aAAUC,KAAK,EAAE;MACf,IAAI,CAACP,KAAK,CAACM,WAAW,GAAGC,KAAK;IAChC;EAAC;EAAA;AAAA,EA1D0CrB,eAAe;AA4D5DC,KAAK,CAACC,8BAA8B,GAAGA,8BAA8B;AAErE,SAASA,8BAA8B,IAAIoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}