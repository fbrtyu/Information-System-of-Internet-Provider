{"ast":null,"code":"import _toConsumableArray from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _set from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/set.js\";\nimport _get from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/admin/Desktop/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { escapeRegExp, normalizePrepare, DIRECTION } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n\n/**\n  Number mask\n  @param {Object} opts\n  @param {string} opts.radix - Single char\n  @param {string} opts.thousandsSeparator - Single char\n  @param {Array<string>} opts.mapToRadix - Array of single chars\n  @param {number} opts.min\n  @param {number} opts.max\n  @param {number} opts.scale - Digits after point\n  @param {boolean} opts.signed - Allow negative\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\n*/\nvar MaskedNumber = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedNumber, _Masked);\n  var _super = _createSuper(MaskedNumber);\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n\n  function MaskedNumber(opts) {\n    _classCallCheck(this, MaskedNumber);\n    return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\n  }\n\n  /**\n    @override\n  */\n  _createClass(MaskedNumber, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n      this._updateRegExps();\n    }\n\n    /** */\n  }, {\n    key: \"_updateRegExps\",\n    value: function _updateRegExps() {\n      var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n      var mid = '\\\\d*';\n      var end = (this.scale ? \"(\".concat(escapeRegExp(this.radix), \"\\\\d{0,\").concat(this.scale, \"})?\") : '') + '$';\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp(\"[\".concat(this.mapToRadix.map(escapeRegExp).join(''), \"]\"), 'g');\n      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n    }\n\n    /** */\n  }, {\n    key: \"_removeThousandsSeparators\",\n    value: function _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, '');\n    }\n\n    /** */\n  }, {\n    key: \"_insertThousandsSeparators\",\n    value: function _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      var parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      ch = this._removeThousandsSeparators(this.scale && this.mapToRadix.length && (\n      /*\n        radix should be mapped when\n        1) input is done from keyboard = flags.input && flags.raw\n        2) unmasked value is set = !flags.input && !flags.raw\n        and should not be mapped when\n        1) value is set = flags.input && !flags.raw\n        2) raw value is set = !flags.input && flags.raw\n      */\n      flags.input && flags.raw || !flags.input && !flags.raw) ? ch.replace(this._mapToRadixRegExp, this.radix) : ch);\n      var _normalizePrepare = normalizePrepare(_get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this).call(this, ch, flags)),\n        _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2),\n        prepCh = _normalizePrepare2[0],\n        details = _normalizePrepare2[1];\n      if (ch && !prepCh) details.skip = true;\n      return [prepCh, details];\n    }\n\n    /** */\n  }, {\n    key: \"_separatorsCount\",\n    value: function _separatorsCount(to) {\n      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var count = 0;\n      for (var pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n      return count;\n    }\n\n    /** */\n  }, {\n    key: \"_separatorsCountFromSlice\",\n    value: function _separatorsCountFromSlice() {\n      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n      var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\n      fromPos = _this$_adjustRangeWit2[0];\n      toPos = _this$_adjustRangeWit2[1];\n      return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n      this._value = this._removeThousandsSeparators(this.value);\n      var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      this._value = this._insertThousandsSeparators(this._value);\n      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n\n    /** */\n  }, {\n    key: \"_findSeparatorAround\",\n    value: function _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        var searchFrom = pos - this.thousandsSeparator.length + 1;\n        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n      return -1;\n    }\n  }, {\n    key: \"_adjustRangeWithSeparators\",\n    value: function _adjustRangeWithSeparators(from, to) {\n      var separatorAroundFromPos = this._findSeparatorAround(from);\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n      var separatorAroundToPos = this._findSeparatorAround(to);\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n      var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\n      fromPos = _this$_adjustRangeWit4[0];\n      toPos = _this$_adjustRangeWit4[1];\n      var valueBeforePos = this.value.slice(0, fromPos);\n      var valueAfterPos = this.value.slice(toPos);\n      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n      return new ChangeDetails({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n      switch (direction) {\n        case DIRECTION.NONE:\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          {\n            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n            if (separatorAtLeftPos >= 0) {\n              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n                return separatorAtLeftPos;\n              }\n            }\n            break;\n          }\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          {\n            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n            if (separatorAtRightPos >= 0) {\n              return separatorAtRightPos + this.thousandsSeparator.length;\n            }\n          }\n      }\n      return cursorPos;\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      // validate as string\n      var valid = Boolean(this._removeThousandsSeparators(this.value).match(this._numberRegExp));\n      if (valid) {\n        // validate as number\n        var number = this.number;\n        valid = valid && !isNaN(number) && (\n        // check min bound for negative values\n        this.min == null || this.min >= 0 || this.min <= this.number) && (\n        // check max bound for positive values\n        this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n      return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.value) {\n        var number = this.number;\n        var validnum = number;\n\n        // check bounds\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = this.doFormat(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\n    }\n\n    /** */\n  }, {\n    key: \"_normalizeZeros\",\n    value: function _normalizeZeros(value) {\n      var parts = this._removeThousandsSeparators(value).split(this.radix);\n\n      // remove leading zeros\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n        return sign + num;\n      });\n      // add leading zero\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n\n    /** */\n  }, {\n    key: \"_padFractionalZeros\",\n    value: function _padFractionalZeros(value) {\n      if (!value) return value;\n      var parts = value.split(this.radix);\n      if (parts.length < 2) parts.push('');\n      parts[1] = parts[1].padEnd(this.scale, '0');\n      return parts.join(this.radix);\n    }\n\n    /** */\n  }, {\n    key: \"doSkipInvalid\",\n    value: function doSkipInvalid(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var checkTail = arguments.length > 2 ? arguments[2] : undefined;\n      var dropFractional = this.scale === 0 && ch !== this.thousandsSeparator && (ch === this.radix || ch === MaskedNumber.UNMASKED_RADIX || this.mapToRadix.includes(ch));\n      return _get(_getPrototypeOf(MaskedNumber.prototype), \"doSkipInvalid\", this).call(this, ch, flags, checkTail) && !dropFractional;\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, MaskedNumber.UNMASKED_RADIX);\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return this.doParse(this.unmaskedValue);\n    },\n    set: function set(n) {\n      this.rawInputValue = this.doFormat(n).replace(MaskedNumber.UNMASKED_RADIX, this.radix);\n    }\n\n    /** Parsed Number */\n  }, {\n    key: \"number\",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(number) {\n      this.typedValue = number;\n    }\n\n    /**\n      Is negative allowed\n      @readonly\n    */\n  }, {\n    key: \"allowNegative\",\n    get: function get() {\n      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n\n    /**\n      @override\n    */\n  }, {\n    key: \"typedValueEquals\",\n    value: function typedValueEquals(value) {\n      // handle  0 -> '' case (typed = 0 even if value = '')\n      // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n      return (_get(_getPrototypeOf(MaskedNumber.prototype), \"typedValueEquals\", this).call(this, value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');\n    }\n  }]);\n  return MaskedNumber;\n}(Masked);\nMaskedNumber.UNMASKED_RADIX = '.';\nMaskedNumber.DEFAULTS = {\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: [MaskedNumber.UNMASKED_RADIX],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false,\n  parse: Number,\n  format: function format(n) {\n    return n.toLocaleString('en-US', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    });\n  }\n};\nMaskedNumber.EMPTY_VALUES = [].concat(_toConsumableArray(Masked.EMPTY_VALUES), [0]);\nIMask.MaskedNumber = MaskedNumber;\nexport { MaskedNumber as default };","map":{"version":3,"names":["escapeRegExp","normalizePrepare","DIRECTION","ChangeDetails","Masked","IMask","MaskedNumber","opts","Object","assign","DEFAULTS","_updateRegExps","start","allowNegative","mid","end","scale","concat","radix","_numberRegExp","RegExp","_mapToRadixRegExp","mapToRadix","map","join","_thousandsSeparatorRegExp","thousandsSeparator","value","replace","parts","split","ch","flags","arguments","length","undefined","_removeThousandsSeparators","input","raw","prepCh","details","skip","to","extendOnSeparators","count","pos","_value","indexOf","slice","_separatorsCount","fromPos","toPos","_adjustRangeWithSeparators","prevBeforeTailValue","tail","_beforeTailState","prevBeforeTailSeparatorsCount","_separatorsCountFromSlice","appendDetails","_insertThousandsSeparators","beforeTailValue","beforeTailSeparatorsCount","tailShift","rawInserted","searchFrom","separatorPos","from","separatorAroundFromPos","_findSeparatorAround","separatorAroundToPos","valueBeforePos","valueAfterPos","cursorPos","direction","NONE","LEFT","FORCE_LEFT","separatorAtLeftPos","separatorAtLeftEndPos","RIGHT","FORCE_RIGHT","separatorAtRightPos","valid","Boolean","match","number","isNaN","min","max","validnum","Math","unmaskedValue","doFormat","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","sign","zeros","num","test","push","padEnd","checkTail","dropFractional","UNMASKED_RADIX","includes","doParse","n","rawInputValue","typedValue","signed","EMPTY_VALUES","parse","Number","format","toLocaleString","useGrouping","maximumFractionDigits","default"],"sources":["C:/Users/admin/Desktop/Документы/123123/GW/Information-System-of-Internet-Provider/SiteReact/gg/app/node_modules/imask/esm/masked/number.js"],"sourcesContent":["import { escapeRegExp, normalizePrepare, DIRECTION } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n\n/**\n  Number mask\n  @param {Object} opts\n  @param {string} opts.radix - Single char\n  @param {string} opts.thousandsSeparator - Single char\n  @param {Array<string>} opts.mapToRadix - Array of single chars\n  @param {number} opts.min\n  @param {number} opts.max\n  @param {number} opts.scale - Digits after point\n  @param {boolean} opts.signed - Allow negative\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\n*/\nclass MaskedNumber extends Masked {\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n\n  constructor(opts) {\n    super(Object.assign({}, MaskedNumber.DEFAULTS, opts));\n  }\n\n  /**\n    @override\n  */\n  _update(opts) {\n    super._update(opts);\n    this._updateRegExps();\n  }\n\n  /** */\n  _updateRegExps() {\n    let start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n    let mid = '\\\\d*';\n    let end = (this.scale ? \"(\".concat(escapeRegExp(this.radix), \"\\\\d{0,\").concat(this.scale, \"})?\") : '') + '$';\n    this._numberRegExp = new RegExp(start + mid + end);\n    this._mapToRadixRegExp = new RegExp(\"[\".concat(this.mapToRadix.map(escapeRegExp).join(''), \"]\"), 'g');\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n  }\n\n  /** */\n  _removeThousandsSeparators(value) {\n    return value.replace(this._thousandsSeparatorRegExp, '');\n  }\n\n  /** */\n  _insertThousandsSeparators(value) {\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n    const parts = value.split(this.radix);\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n    return parts.join(this.radix);\n  }\n\n  /**\n    @override\n  */\n  doPrepare(ch) {\n    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    ch = this._removeThousandsSeparators(this.scale && this.mapToRadix.length && (\n    /*\n      radix should be mapped when\n      1) input is done from keyboard = flags.input && flags.raw\n      2) unmasked value is set = !flags.input && !flags.raw\n      and should not be mapped when\n      1) value is set = flags.input && !flags.raw\n      2) raw value is set = !flags.input && flags.raw\n    */\n    flags.input && flags.raw || !flags.input && !flags.raw) ? ch.replace(this._mapToRadixRegExp, this.radix) : ch);\n    const [prepCh, details] = normalizePrepare(super.doPrepare(ch, flags));\n    if (ch && !prepCh) details.skip = true;\n    return [prepCh, details];\n  }\n\n  /** */\n  _separatorsCount(to) {\n    let extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let count = 0;\n    for (let pos = 0; pos < to; ++pos) {\n      if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n        ++count;\n        if (extendOnSeparators) to += this.thousandsSeparator.length;\n      }\n    }\n    return count;\n  }\n\n  /** */\n  _separatorsCountFromSlice() {\n    let slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n    return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n  }\n\n  /**\n    @override\n  */\n  extractInput() {\n    let fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n    let flags = arguments.length > 2 ? arguments[2] : undefined;\n    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n    return this._removeThousandsSeparators(super.extractInput(fromPos, toPos, flags));\n  }\n\n  /**\n    @override\n  */\n  _appendCharRaw(ch) {\n    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.thousandsSeparator) return super._appendCharRaw(ch, flags);\n    const prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n    const prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n    this._value = this._removeThousandsSeparators(this.value);\n    const appendDetails = super._appendCharRaw(ch, flags);\n    this._value = this._insertThousandsSeparators(this._value);\n    const beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n    appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n    appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n    return appendDetails;\n  }\n\n  /** */\n  _findSeparatorAround(pos) {\n    if (this.thousandsSeparator) {\n      const searchFrom = pos - this.thousandsSeparator.length + 1;\n      const separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n      if (separatorPos <= pos) return separatorPos;\n    }\n    return -1;\n  }\n  _adjustRangeWithSeparators(from, to) {\n    const separatorAroundFromPos = this._findSeparatorAround(from);\n    if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n    const separatorAroundToPos = this._findSeparatorAround(to);\n    if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n    return [from, to];\n  }\n\n  /**\n    @override\n  */\n  remove() {\n    let fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n    const valueBeforePos = this.value.slice(0, fromPos);\n    const valueAfterPos = this.value.slice(toPos);\n    const prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n    this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n    return new ChangeDetails({\n      tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n    });\n  }\n\n  /**\n    @override\n  */\n  nearestInputPos(cursorPos, direction) {\n    if (!this.thousandsSeparator) return cursorPos;\n    switch (direction) {\n      case DIRECTION.NONE:\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT:\n        {\n          const separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n          if (separatorAtLeftPos >= 0) {\n            const separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n            if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n              return separatorAtLeftPos;\n            }\n          }\n          break;\n        }\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n        {\n          const separatorAtRightPos = this._findSeparatorAround(cursorPos);\n          if (separatorAtRightPos >= 0) {\n            return separatorAtRightPos + this.thousandsSeparator.length;\n          }\n        }\n    }\n    return cursorPos;\n  }\n\n  /**\n    @override\n  */\n  doValidate(flags) {\n    // validate as string\n    let valid = Boolean(this._removeThousandsSeparators(this.value).match(this._numberRegExp));\n    if (valid) {\n      // validate as number\n      const number = this.number;\n      valid = valid && !isNaN(number) && (\n      // check min bound for negative values\n      this.min == null || this.min >= 0 || this.min <= this.number) && (\n      // check max bound for positive values\n      this.max == null || this.max <= 0 || this.number <= this.max);\n    }\n    return valid && super.doValidate(flags);\n  }\n\n  /**\n    @override\n  */\n  doCommit() {\n    if (this.value) {\n      const number = this.number;\n      let validnum = number;\n\n      // check bounds\n      if (this.min != null) validnum = Math.max(validnum, this.min);\n      if (this.max != null) validnum = Math.min(validnum, this.max);\n      if (validnum !== number) this.unmaskedValue = this.doFormat(validnum);\n      let formatted = this.value;\n      if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n      if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n      this._value = formatted;\n    }\n    super.doCommit();\n  }\n\n  /** */\n  _normalizeZeros(value) {\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\n\n    // remove leading zeros\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\n    // add leading zero\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n    if (parts.length > 1) {\n      parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n      if (!parts[1].length) parts.length = 1; // remove fractional\n    }\n\n    return this._insertThousandsSeparators(parts.join(this.radix));\n  }\n\n  /** */\n  _padFractionalZeros(value) {\n    if (!value) return value;\n    const parts = value.split(this.radix);\n    if (parts.length < 2) parts.push('');\n    parts[1] = parts[1].padEnd(this.scale, '0');\n    return parts.join(this.radix);\n  }\n\n  /** */\n  doSkipInvalid(ch) {\n    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let checkTail = arguments.length > 2 ? arguments[2] : undefined;\n    const dropFractional = this.scale === 0 && ch !== this.thousandsSeparator && (ch === this.radix || ch === MaskedNumber.UNMASKED_RADIX || this.mapToRadix.includes(ch));\n    return super.doSkipInvalid(ch, flags, checkTail) && !dropFractional;\n  }\n\n  /**\n    @override\n  */\n  get unmaskedValue() {\n    return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, MaskedNumber.UNMASKED_RADIX);\n  }\n  set unmaskedValue(unmaskedValue) {\n    super.unmaskedValue = unmaskedValue;\n  }\n\n  /**\n    @override\n  */\n  get typedValue() {\n    return this.doParse(this.unmaskedValue);\n  }\n  set typedValue(n) {\n    this.rawInputValue = this.doFormat(n).replace(MaskedNumber.UNMASKED_RADIX, this.radix);\n  }\n\n  /** Parsed Number */\n  get number() {\n    return this.typedValue;\n  }\n  set number(number) {\n    this.typedValue = number;\n  }\n\n  /**\n    Is negative allowed\n    @readonly\n  */\n  get allowNegative() {\n    return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n  }\n\n  /**\n    @override\n  */\n  typedValueEquals(value) {\n    // handle  0 -> '' case (typed = 0 even if value = '')\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n    return (super.typedValueEquals(value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');\n  }\n}\nMaskedNumber.UNMASKED_RADIX = '.';\nMaskedNumber.DEFAULTS = {\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: [MaskedNumber.UNMASKED_RADIX],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false,\n  parse: Number,\n  format: n => n.toLocaleString('en-US', {\n    useGrouping: false,\n    maximumFractionDigits: 20\n  })\n};\nMaskedNumber.EMPTY_VALUES = [...Masked.EMPTY_VALUES, 0];\nIMask.MaskedNumber = MaskedNumber;\n\nexport { MaskedNumber as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}